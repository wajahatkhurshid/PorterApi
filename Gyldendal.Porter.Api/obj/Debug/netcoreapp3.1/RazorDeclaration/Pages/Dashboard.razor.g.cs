// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Gyldendal.Porter.Api.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Porter.Api;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Porter.Api.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\Pages\Dashboard.razor"
using Gyldendal.Porter.Domain.Contracts.Entities.Queue;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\Pages\Dashboard.razor"
using Gyldendal.Porter.Domain.Contracts.Repositories;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Dashboard : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 111 "D:\Wajahat\PorterApi\src\Gyldendal.Porter.Api\Gyldendal.Porter.Api\Pages\Dashboard.razor"
       


    void OnSeriesClick(SeriesClickEventArgs args)
    {

    }
    public class ChartData
    {
        public string Entity { get; set; }
        public long Count { get; set; }
        public bool Explode { get; set; }
    }


    bool showPagerSummary = true;
    private List<EntityUpdate> _entityUpdates;

    private List<CountRow> _docCounts = null;

    private List<ChartData> chartData = null;
    private List<ChartData> sevenDaysChartData = null;
    private List<ChartData> thirtyDaysChartData = null;

    readonly IEnumerable<int> _pageSizeOptions = new int[] {10, 20, 30};
    RadzenDataGrid<EntityUpdate> _entityUpdateDataGrid;
    RadzenDataGrid<CountRow> _countDataGrid;
    private const string PagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";

    protected override bool ShouldRender() => true;

    protected override async Task OnInitializedAsync()
    {

        _entityUpdates = await _entityUpdateRepository.GetAllAsync();
        var now = DateTime.Now;
        var weekTimeSpan = DateTime.Now.AddDays(-7);
        var monthTimeSpan = DateTime.Now.AddDays(-30);
        var prodCount = await _cookedProductRepository.GetCount();
        var contributorCount = await _cookedContributorRepository.GetCount();
        var seriesCount = await _cookedProductRepository.GetCount();
        var workReviewCount = await _cookedContributorRepository.GetCount();
        var sevenDaysProductCount = await _cookedProductRepository.GetCountByTimeRange(weekTimeSpan, now);
        var sevenDaysContributorCount = await _cookedContributorRepository.GetCountByTimeRange(weekTimeSpan, now);
        var sevenDaysSeriesCount = await _cookedSeriesRepository.GetCountByTimeRange(weekTimeSpan, now);
        var sevenDaysWorkReviewCount = await _cookedWorkReviewRepository.GetCountByTimeRange(weekTimeSpan, now);
        var thirtyDaysProductCount = await _cookedProductRepository.GetCountByTimeRange(monthTimeSpan, now);
        var thirtyDaysContributorCount = await _cookedContributorRepository.GetCountByTimeRange(monthTimeSpan, now);
        var thirtyDaysSeriesCount = await _cookedSeriesRepository.GetCountByTimeRange(monthTimeSpan, now);
        var thirtyDaysWorkReviewCount = await _cookedWorkReviewRepository.GetCountByTimeRange(monthTimeSpan, now);
        _docCounts = new List<CountRow>
        {
            new CountRow("Current count", prodCount, seriesCount, contributorCount, workReviewCount),
            new CountRow("Updated in last 7 days",sevenDaysProductCount ,sevenDaysSeriesCount ,sevenDaysContributorCount , sevenDaysWorkReviewCount),
            new CountRow("Updated in last 30 days",thirtyDaysProductCount , thirtyDaysSeriesCount,thirtyDaysContributorCount ,thirtyDaysWorkReviewCount )
        };

        chartData = new List<ChartData>
        {
            new ChartData(){ Entity = "Products",Count =prodCount, Explode = false},
            new ChartData(){ Entity = "Contributors",Count = contributorCount, Explode = false},
            new ChartData(){ Entity = "WorkReviews",Count = workReviewCount, Explode = false},
            new ChartData(){ Entity = "Series",Count = seriesCount, Explode = false},

        };
        sevenDaysChartData = new List<ChartData>
        {
            new ChartData(){ Entity = "Products",Count =sevenDaysProductCount, Explode = false},
            new ChartData(){ Entity = "Contributors",Count = sevenDaysContributorCount, Explode = false},
            new ChartData(){ Entity = "WorkReviews",Count = sevenDaysWorkReviewCount, Explode = false},
            new ChartData(){ Entity = "Series",Count = sevenDaysSeriesCount, Explode = false},

        };
        thirtyDaysChartData = new List<ChartData>
        {
            new ChartData(){ Entity = "Products",Count =thirtyDaysProductCount, Explode = false},
            new ChartData(){ Entity = "Contributors",Count = thirtyDaysContributorCount, Explode = false},
            new ChartData(){ Entity = "WorkReviews",Count = thirtyDaysWorkReviewCount, Explode = false},
            new ChartData(){ Entity = "Series",Count = thirtyDaysSeriesCount, Explode = false},

        };
    }

    async Task FirstPage()
    {
        await _entityUpdateDataGrid.FirstPage();
    }

    async Task LastPage()
    {
        await _entityUpdateDataGrid.LastPage();
    }

    class CountRow
    {
        public CountRow(string title, long productCount, long seriesCount, long contributorCount, long workReviewCount)
        {
            Title = title;
            ProductCount = productCount;
            SeriesCount = seriesCount;
            ContributorCount = contributorCount;
            WorkReviewCount = workReviewCount;
        }

        public string Title { get; set; }
        public long ProductCount { get; set; }
        public long SeriesCount { get; set; }
        public long ContributorCount { get; set; }
        public long WorkReviewCount { get; set; }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICookedContributorRepository _cookedContributorRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICookedWorkReviewRepository _cookedWorkReviewRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICookedSeriesRepository _cookedSeriesRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICookedProductRepository _cookedProductRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IEntityUpdateRepository _entityUpdateRepository { get; set; }
    }
}
#pragma warning restore 1591
